
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum RoleEnum {
  ADMIN
  STAFF
  GUEST
  DOCTOR
}

enum QueueType {
  OPD
  IPD
}

enum QueueStatus {
  WAITING
  EXAMINING
  COMPLETED
  CANCELLED
  NO_SHOW
}


model Branch {
  id           Int      @id @default(autoincrement())
  code         String   @unique          // เช่น BR001, BR002
  name         String                    // ชื่อสาขา
  address      String?
  phone        String?
  isActive     Boolean  @default(true)
  isMainBranch Boolean  @default(false)  // ระบุว่าสาขานี้เป็นสาขาหลักหรือไม่
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // ความสัมพันธ์
  users     User[]
  patients  Patient[]
  files     File[]
  systemLogs SystemLog[]
  registrations Registration[]
  queues    Queue[]
  registrationLogs RegistrationLog[]
  queueLogs QueueLog[]
  visits    Visit[]
  visitLogs VisitLog[]
}

model User {
  id           Int          @id @default(autoincrement())
  name         String
  email        String       @unique
  password     String

  role         RoleEnum     @default(GUEST) 

  branchId     Int?
  branch       Branch?      @relation(fields: [branchId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  isActive     Boolean      @default(true)
  createdBy    Int?         // ใครสร้าง
  createdByUser User?       @relation("UserCreatedBy", fields: [createdBy], references: [id], onDelete: SetNull)
  updatedBy    Int?         // ใครอัปเดตล่าสุด
  updatedByUser User?       @relation("UserUpdatedBy", fields: [updatedBy], references: [id], onDelete: SetNull)

  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@index([role])
  @@index([branchId])
  @@index([createdBy])
  @@index([updatedBy])

  // Relations for audit fields
  systemLogs SystemLog[]
  patientGroupsCreated PatientGroup[] @relation("PatientGroupCreatedBy")
  patientGroupsUpdated PatientGroup[] @relation("PatientGroupUpdatedBy")
  insuranceTypesCreated InsuranceType[] @relation("InsuranceTypeCreatedBy")
  insuranceTypesUpdated InsuranceType[] @relation("InsuranceTypeUpdatedBy")
  tagsCreated Tag[] @relation("TagCreatedBy")
  tagsUpdated Tag[] @relation("TagUpdatedBy")
  usersCreated User[] @relation("UserCreatedBy")
  usersUpdated User[] @relation("UserUpdatedBy")
  patientsCreated Patient[] @relation("PatientCreatedBy")
  patientsUpdated Patient[] @relation("PatientUpdatedBy")
  registrations Registration[]
  registrationLogs RegistrationLog[]
  cancelledRegistrations Registration[] @relation("CancelledRegistrations")
  cancelledQueues Queue[] @relation("CancelledQueues")
  queueLogs QueueLog[]
  visitLogs VisitLog[]
  visitsAsDoctor Visit[] @relation("VisitDoctor")
  visitsAsOperator Visit[] @relation("VisitOperator")
}

model Patient {
  id                 Int               @id @default(autoincrement())
  hn                 String            @unique  
  prefix             String?
  first_name         String
  last_name          String
  nickname           String?
  first_name_en      String?
  last_name_en       String?
  gender             String
  birth_date         DateTime
  national_id        String?
  passport_no        String?
  nationality        String?
  religion           String?
  marital_status     String?
  education_level    String?
  blood_group        String?
  note               String?

  //  ข้อมูลติดต่อ
  phone_1            String?
  phone_2            String?
  email              String?

  //  ที่อยู่ผู้ป่วย
  address            String?
  sub_district       String?
  district           String?
  province           String?
  postal_code        String?

  // รูปโปรไฟล์ (เก็บ URL ใน blob storage)
  profile_image      String?                    // URL ของรูปโปรไฟล์ใน blob storage

  //  ข้อมูลบริษัท / ออกใบเสร็จ
  company_name       String?
  company_tax_id     String?
  company_phone      String?
  company_email      String?
  company_address    String?
  company_subdistrict String?
  company_district   String?
  company_province   String?
  company_postal_code String?

  //  ข้อมูลสุขภาพ
  weight             String?
  height             String?
  waist              String?
  chest              String?
  allergy_history    String?
  mental_health      String?
  underlying_disease String?
  health_note        String?

  //  ข้อมูลการรักษา
  treatment_type     String
  insurance_type_id  Int?
  insuranceType      InsuranceType? @relation(fields: [insurance_type_id], references: [id])
  patient_group_id   Int?
  patientGroup       PatientGroup?  @relation(fields: [patient_group_id], references: [id])

  // สาขา
  branchId           Int?
  branch             Branch? @relation(fields: [branchId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  //  แต้มสะสม / วงเงิน
  points             Int       @default(0)
  balance            Float     @default(0.0)

  //  สถานะการใช้งาน
  isActive           Boolean   @default(true)

  //  ผู้ติดต่อและไฟล์แนบ
  contactPersons     ContactPerson[]
  files              File[]
  patientTags        PatientTag[]
  registrations      Registration[]
  visits          Visit[]

  // Audit fields
  createdBy          Int?
  updatedBy          Int?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  createdByUser      User? @relation("PatientCreatedBy", fields: [createdBy], references: [id])
  updatedByUser      User? @relation("PatientUpdatedBy", fields: [updatedBy], references: [id])

  @@index([branchId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([hn])
  @@index([first_name, last_name])
  @@index([phone_1])
  @@index([national_id])
  @@index([isActive])
  @@index([createdAt])
}

model ContactPerson {
  id             Int       @id @default(autoincrement())
  name           String     // ชื่อ–นามสกุล
  phone          String?    // เบอร์โทรศัพท์
  relationship   String?    // ความสัมพันธ์ เช่น บิดา, มารดา, คู่สมรส

  patient_id     Int
  patient        Patient   @relation(fields: [patient_id], references: [id])

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model PatientGroup {
  id               Int       @id @default(autoincrement())
  name             String                     // เช่น Walk-in, Corporate, VIP
  note             String?
  color            String?                    // สีของกลุ่ม เช่น '#22C55E'
  discount_type    String?                    // 'percent' หรือ 'amount'
  discount_amount  Float?                     // เช่น 10% หรือ 100 บาท
  isActive         Boolean   @default(true)   // เปิด/ปิดใช้งาน
  createdBy        Int?                       // ใครสร้าง
  createdByUser    User?     @relation("PatientGroupCreatedBy", fields: [createdBy], references: [id], onDelete: SetNull)
  updatedBy        Int?                       // ใครอัปเดตล่าสุด
  updatedByUser    User?     @relation("PatientGroupUpdatedBy", fields: [updatedBy], references: [id], onDelete: SetNull)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  patients         Patient[]
  
  @@index([isActive])
  @@index([createdBy])
  @@index([updatedBy])
}

model InsuranceType {
  id       Int       @id @default(autoincrement())
  code     String     @unique                  // เช่น SMK, TSK, AIOIC
  name     String                              // เช่น สินมั่นคงประกันภัย จำกัด (มหาชน)
  note     String?
  isActive Boolean   @default(true)            // เปิด/ปิดใช้งาน
  createdBy Int?                               // ใครสร้าง
  createdByUser User? @relation("InsuranceTypeCreatedBy", fields: [createdBy], references: [id], onDelete: SetNull)
  updatedBy Int?                               // ใครอัปเดตล่าสุด
  updatedByUser User? @relation("InsuranceTypeUpdatedBy", fields: [updatedBy], references: [id], onDelete: SetNull)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  patients Patient[]
  
  @@index([isActive])
  @@index([createdBy])
  @@index([updatedBy])
}

model Tag {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  color     String?    // สีของแท็ก เช่น '#22C55E'
  note      String?
  isActive  Boolean    @default(true)   // เปิด/ปิดใช้งาน
  createdBy Int?                        // ใครสร้าง
  createdByUser User? @relation("TagCreatedBy", fields: [createdBy], references: [id], onDelete: SetNull)
  updatedBy Int?                        // ใครอัปเดตล่าสุด
  updatedByUser User? @relation("TagUpdatedBy", fields: [updatedBy], references: [id], onDelete: SetNull)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  patients  PatientTag[]
  
  @@index([isActive])
  @@index([createdBy])
  @@index([updatedBy])
}

model PatientTag {
  id         Int      @id @default(autoincrement())
  patient_id Int
  tag_id     Int
  patient    Patient  @relation(fields: [patient_id], references: [id])
  tag        Tag      @relation(fields: [tag_id], references: [id])
}

model File {
  id          Int      @id @default(autoincrement())
  url         String
  name        String?  // ชื่อไฟล์ที่ผู้ใช้กำหนด (ถ้าไม่กรอกใช้ชื่อไฟล์เดิม)
  originalName String? // ชื่อไฟล์เดิมพร้อมนามสกุล
  fileSize    Int?     // ขนาดไฟล์ (bytes)
  description String?
  uploadedBy  String?
  patient_id  Int
  patient     Patient   @relation(fields: [patient_id], references: [id])
  
  // สาขา
  branchId    Int?
  branch      Branch? @relation(fields: [branchId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  
  createdAt   DateTime  @default(now())

  @@index([branchId])
}

model SystemLog {
  id          Int       @id @default(autoincrement())
  action      String                     // ชื่อ action เช่น CREATE_USER, APPROVE_USER, UPDATE_LEVEL
  details     Json?                       // เก็บรายละเอียดเพิ่มเติม เช่น { "userId": 12, "before": {}, "after": {} }
  userId      Int?                        // ใครเป็นคนทำ (nullable กรณีระบบทำ)
  user        User?      @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  branchId    Int?                        // ถ้ามีหลายสาขา
  branch      Branch?   @relation(fields: [branchId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  hn          String?                     // หมายเลข HN ของผู้ป่วย (สำหรับกรอง log)
  
  createdAt   DateTime  @default(now())

  
  @@index([branchId])
  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@index([hn])
}

model Department {
  id          String   @id @default(cuid())
  name        String
  isActive    Boolean  @default(true)
  createdBy   String
  updatedBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  registrations Registration[]
  queues       Queue[]
  visits       Visit[]
}

model Registration {
  id              String      @id @default(cuid())
  vnNumber        String
  type            QueueType   @default(OPD)
  reason          String?     // เหตุผลการยกเลิก
  cancelledAt     DateTime?   // วันที่ยกเลิก
  cancelledBy     Int?        // ผู้ยกเลิก
  appointmentDate DateTime
  
  // Relations
  patientId       Int
  patient         Patient           @relation(fields: [patientId], references: [id])
  
  doctorId        Int?
  doctor          User?             @relation(fields: [doctorId], references: [id])
  
  departmentId    String?
  department      Department?       @relation(fields: [departmentId], references: [id])
  
  branchId        Int
  branch          Branch            @relation(fields: [branchId], references: [id])
  
  createdBy       String
  updatedBy       String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  queue           Queue?
  registrationLogs RegistrationLog[]
  cancelledByUser User?             @relation("CancelledRegistrations", fields: [cancelledBy], references: [id])
  visits          Visit[]
}

model Queue {
  id              String      @id @default(cuid())
  queueNumber     String      // Q001, Q002, ...
  status          QueueStatus @default(WAITING)
  reason          String?     // เหตุผลการยกเลิก
  cancelledAt     DateTime?   // วันที่ยกเลิก
  cancelledBy     Int?        // ผู้ยกเลิก
  
  // Relations
  registrationId  String      @unique
  registration    Registration @relation(fields: [registrationId], references: [id])
  
  departmentId    String?
  department      Department? @relation(fields: [departmentId], references: [id])
  
  branchId        Int
  branch          Branch      @relation(fields: [branchId], references: [id])
  
  createdBy       String
  updatedBy       String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relations
  cancelledByUser User?       @relation("CancelledQueues", fields: [cancelledBy], references: [id])
  queueLogs       QueueLog[]
}

model RegistrationLog {
  id              String      @id @default(cuid())
  registrationId  String
  action          String      // CREATE, UPDATE, CANCEL, COMPLETE
  details         Json?       // รายละเอียดการกระทำ
  reason          String?     // เหตุผล
  userId          Int?        // ใครทำ
  user            User?       @relation(fields: [userId], references: [id])
  branchId        Int?        // สาขา
  branch          Branch?     @relation(fields: [branchId], references: [id])
  hn              String?     // HN ของผู้ป่วย
  createdAt       DateTime    @default(now())
  
  // Relations
  registration    Registration? @relation(fields: [registrationId], references: [id])
}

model QueueLog {
  id              String      @id @default(cuid())
  queueId         String
  action          String      // CREATE, UPDATE_STATUS, CANCEL
  details         Json?       // รายละเอียดการกระทำ
  reason          String?     // เหตุผล
  userId          Int?        // ใครทำ
  user            User?       @relation(fields: [userId], references: [id])
  branchId        Int?        // สาขา
  branch          Branch?     @relation(fields: [branchId], references: [id])
  queueNumber     String?     // หมายเลขคิว
  hn              String?     // HN ของผู้ป่วย
  createdAt       DateTime    @default(now())
  
  // Relations
  queue           Queue       @relation(fields: [queueId], references: [id])
}

// ==========================================
// Visit - การมารับบริการ (OPD)
// ==========================================
model Visit {
  id           String    @id @default(cuid())

  // อ้างอิงหลัก
  registrationId String?
  registration   Registration? @relation(fields: [registrationId], references: [id])

  patientId    Int
  patient      Patient   @relation(fields: [patientId], references: [id])

  doctorId     Int?
  doctor       User?     @relation("VisitDoctor", fields: [doctorId], references: [id])

  operatorId   Int?
  operator     User?     @relation("VisitOperator", fields: [operatorId], references: [id])

  departmentId String?
  department   Department? @relation(fields: [departmentId], references: [id])

  branchId     Int
  branch       Branch    @relation(fields: [branchId], references: [id])

  visitAt      DateTime  @default(now())

  // Vital signs / Basic Info
  weightKg             Decimal? @db.Decimal(5, 2)
  heightCm             Decimal? @db.Decimal(5, 2)
  bmi                  Decimal? @db.Decimal(5, 2)
  bsa                  Decimal? @db.Decimal(5, 2)
  temperatureC         Decimal? @db.Decimal(4, 1)
  bpSys                Int?
  bpDia                Int?
  pulseRate            Int?
  respiratoryRate      Int?
  vas                  Decimal? @db.Decimal(3, 1)
  o2Sat                Decimal? @db.Decimal(4, 1)
  crt                  String?
  headCircumferenceCm  Decimal? @db.Decimal(5, 2)
  chestCircumferenceCm Decimal? @db.Decimal(5, 2)
  waistCircumferenceCm Decimal? @db.Decimal(5, 2)
  alcohol              String?   // none, sometimes, yes
  smoking              String?   // none, sometimes, yes
  customFields         Json?     // เก็บข้อมูล custom field หลายค่า เช่น { "cannabis": "ไม่สูบ", "exercise": "..." }
  chart                Json?     // เก็บข้อมูล chart หลายค่า เช่น { "chart": "..." }
  // Clinical Notes
  cc           String?
  hpi          String?
  pmh          String?
  dxText       String?
  ga           String?
  pe           String?
  doctorAdvice String?
  doctorNote   String?

  // Pain Assessment
  painVas      Decimal? @db.Decimal(3, 1)
  painType     String?  // none, mild, moderate, severe, very_severe
  painLocation String?

  // Swelling Assessment
  swellingLevel     String?  // 1+, 2+, 3+, 4+
  swellingType      String?  // Pitting, Non-Pitting
  swellingLocation  String?

  // Medical Certificate (OPD)
  mcNotRest  Boolean?
  mcRestFrom DateTime?
  mcRestTo   DateTime?
  mcCanFly   Boolean?

  // Audit fields
  isActive  Boolean  @default(true)
  createdBy String?
  updatedBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  diagnoses VisitDiagnosis[]
  logs VisitLog[]

  @@index([patientId, visitAt])
  @@index([registrationId])
  @@index([doctorId, visitAt])
  @@index([branchId, visitAt])
}

// ==========================================
// ICD10 - Catalog ของรหัสการวินิจฉัยโรค
// ==========================================
model Icd10 {
  id               Int      @id @default(autoincrement())
  code             String   @unique   // รหัสโรคย่อย_NO_POINT (ไม่มีจุด)
  groupCode        String?            // กลุ่มรหัสโรค
  nameTh           String             // ชื่อสามัญ (ชื่อรหัสย่อย) [TH]
  nameEn           String?            // ชื่อสามัญ (ชื่อรหัสย่อย) [Eng]
  groupNameTh      String?            // ชื่อกลุ่มรหัสโรค [TH]
  groupNameEn      String?            // ชื่อกลุ่มรหัสโรค [Eng]
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  visits VisitDiagnosis[]

  @@index([code])
  @@index([groupCode])
  @@index([isActive])
}

// ==========================================
// VisitDiagnosis - การวินิจฉัยโรคในแต่ละ Visit
// ==========================================
model VisitDiagnosis {
  id         Int      @id @default(autoincrement())
  
  visitId    String
  visit      Visit    @relation(fields: [visitId], references: [id])

  icd10Id    Int
  icd10      Icd10    @relation(fields: [icd10Id], references: [id])

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([visitId, icd10Id])
  @@index([visitId])
  @@index([icd10Id])
}

// ==========================================
// VisitLog - บันทึกเหตุการณ์ของ Visit
// ==========================================
model VisitLog {
  id        String   @id @default(cuid())

  visitId   String
  visit     Visit    @relation(fields: [visitId], references: [id])

  action    String   // CREATE_VISIT, UPDATE_VISIT, ADD_DX, REMOVE_DX, etc.
  details   Json?

  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])

  branchId  Int?
  branch    Branch?  @relation(fields: [branchId], references: [id])

  hn        String?

  createdAt DateTime @default(now())

  @@index([visitId])
  @@index([userId])
  @@index([branchId])
  @@index([action])
  @@index([createdAt])
  @@index([hn])
}